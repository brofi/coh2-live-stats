[build-system]
requires = ["setuptools >= 61.0", "setuptools-scm >= 8"]
build-backend = "setuptools.build_meta"

[project]
name = "coh2_live_stats"
dynamic = ["version"]
dependencies = [
    "httpx >= 0.27.0",
    "prettytable >= 3.10.0",
    "pydantic-settings >= 2.2.1",
    "watchdog >= 4.0.0",
]
requires-python = ">= 3.12"
authors = [
    { name = "Andreas Becker", email = "brofi.archlinux@gmail.com" },
]
description = "Shows player stats of a currently or last played or viewed CoH2 game"
readme = "README.md"
license = { file = "COPYING" }
keywords = ["CoH2", "Company of Heroes 2"]
classifiers = [
    "Environment :: Console",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Games/Entertainment :: Real Time Strategy"
]

# No better solution for this yet (https://peps.python.org/pep-0735/)
[project.optional-dependencies]
dev = [
    "ruff >= 0.3.5",
    "pre-commit >= 3.7.0",
]
build = [
    "build >= 1.2.1",
    "invoke >= 2.2.0",
    "pyinstaller >= 6.5.0",
    "tomlkit >= 0.12.4",
]

[project.scripts]
coh2livestats = "coh2_live_stats.__main__:run"

[tool.setuptools.package-data]
coh2_live_stats = ["*.toml"]
"coh2_live_stats.res" = ["*.wav"]

[tool.setuptools_scm]
version_file = "src/coh2_live_stats/version.py"

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ASYNC", # flake8-async
    "TRIO", # flake8-trio
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # fomatter sometimes allows code to exceed 'line-length'
    "TD001", "TD002", "TD003", # no invalid tag and missing author or issue link
    "TRY003", # too restrictive
    "COM812", # conflicts with formatter
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false
classes = ["URL"]

[tool.ruff.format]
docstring-code-format = true
quote-style = "preserve"
skip-magic-trailing-comma = true
